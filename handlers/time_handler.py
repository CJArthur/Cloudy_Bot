#--- –û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–∏–ª–∏–æ—Ç–µ–∫–∏ ---#
from aiogram import types, Router, F
from aiogram.types import Message
from datetime import datetime, timezone
from keyboards.time_kb import(menu_ikb, cansel_ikb,
                              has_time_ikb, no_time_ikb,
                              create_deleting_ikb)

#--- –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---#
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command

#--- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---#
from database.db import (set_user_time, get_user_time,
                        get_user_time_list, delete_user_time)

# –¥–ª—è –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
time_router = Router()

# –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Time(StatesGroup):
    user_time = State()
    delete_time = State()

#--- –í—Ä–µ–º—è –¥–ª—è –≤—ã–≤–æ–¥–∞ ---#
user_date = datetime.now()
user_t = int(user_date.strftime('%H'))
grinvich_t = datetime.now(timezone.utc)


#-------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π --------#
@time_router.message(Command("time"))
async def time_manipulation(message: Message):
    user_id = message.from_user.id
    countTimes = get_user_time(user_id)

    await message.answer(f"*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üîß\n*" \
                         "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è\n" \
                         "2. –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è\n" \
                         "3. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: *3*\n\n"
                         f"üí¨–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: *{countTimes}*",
                         reply_markup = menu_ikb, parse_mode = "Markdown")


#--- –ë–ª–æ–∫ —Å —Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º –≤—Ä–µ–º–µ–Ω–∏ ---#
@time_router.callback_query(F.data == "set_user_time")
async def second_time_command(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤–∞–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00)")

    # —É—Å—Ç–∞–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ 
    await state.set_state(Time.user_time)


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
@time_router.message(Time.user_time)
async def save_user_time(message: Message, state: FSMContext):
    user_set_time = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
    if (len(user_set_time) == 5 and
        user_set_time[2] == ":" and
        user_set_time.replace(":", "").isdigit() and
        int(user_set_time[:2]) <= 23 and 
        int(user_set_time[-2:]) <= 59):

        success = set_user_time(user_id=message.from_user.id, time=user_set_time)
        
        if success:
            await message.answer(
                f"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç—á–µ—Ç –ø–æ –ø–æ–≥–æ–¥–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–∞–º –≤ *{user_set_time}* ‚õÖÔ∏è",
                parse_mode="Markdown"
            )

            await state.clear()
        else:
            await message.answer(
                "‚ùå –ü—Ä–µ–≤—ã—â–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Ä–µ–º–µ–Ω. –£–¥–∞–ª–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ",
                reply_markup = has_time_ikb
            )

            await state.clear()
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00)",
            reply_markup = cansel_ikb
        )


#--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è ---#
@time_router.callback_query(F.data == "cansel_action")
async def cansel_action(callback: types.CallbackQuery, state: FSMContext):
    # —á–∏—Å—Ç–∏–º –∑–∞ —Å–æ–±–æ–π —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete()

    await callback.answer("–£—Å–ø–µ—à–Ω–æ!")
    # –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()


# --- –ë–ª–æ–∫ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ --- #
@time_router.callback_query(F.data == "delete_time")
async def ask_to_delete_time(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    times = get_user_time_list(user_id)

    if not times:
        await callback.message.answer("‚ùóÔ∏è–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è‚ùóÔ∏è", reply_markup=no_time_ikb)
        await state.clear()
    else:
        ikb = create_deleting_ikb(times)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=ikb)
        await state.set_state(Time.delete_time)

        

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ --- #
@time_router.callback_query(Time.delete_time, F.data.startswith("delete_"))
async def delete_set_time(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    time_to_delete = callback.data.replace("delete_", "")

    delete_user_time(user_id, time_to_delete)

    await callback.message.answer(f"–í—Ä–µ–º—è {time_to_delete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ‚úÖ")
    await state.clear()

    