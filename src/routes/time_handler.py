#--- –û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–∏–ª–∏–æ—Ç–µ–∫–∏ ---#
from aiogram import types, Router, F
from aiogram.types import Message
from datetime import datetime, timezone
from keyboards.time_kb import(menu_ikb, cansel_ikb,
                              has_time_ikb, no_time_ikb)

#--- –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---#
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command

#--- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---#
from infra.db import set_user_time, get_user_time, delete_user_time

# –¥–ª—è –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
time_router = Router()

# –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Time(StatesGroup):
    user_time = State()
    delete_time = State()

#--- –í—Ä–µ–º—è –¥–ª—è –≤—ã–≤–æ–¥–∞ ---#
user_date = datetime.now()
user_t = int(user_date.strftime('%H'))
grinvich_t = datetime.now(timezone.utc)


#-------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π --------#
@time_router.message(Command("time"))
async def time_manipulation(message: Message):
    user_set_time = get_user_time(message.from_user.id)
    countTimes = ", ".join(user_set_time) if user_set_time else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    await message.answer(f"*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üîß\n*" \
                         "1. –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n" \
                         "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n" \
                         "3. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n" \
                         "4. –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è\n\n" \
                         f"üí¨–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: *{countTimes}*", reply_markup = menu_ikb, parse_mode = "Markdown")


#--- –ë–ª–æ–∫ —Å —Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º –≤—Ä–µ–º–µ–Ω–∏ ---#
@time_router.callback_query(F.data == "set_user_time")
async def second_time_command(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤–∞–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00)")

    # —É—Å—Ç–∞–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ 
    await state.set_state(Time.user_time)


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
@time_router.message(Time.user_time)
async def save_user_time(message: Message, state: FSMContext):
    
    user_set_time = message.text # —Å–æ—Ö—Ä–∞–Ω–∏–º –≤—Ä–µ–º—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    try:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        if (len(user_set_time) == 5 and
            user_set_time[2] == ":" and
            user_set_time.replace(":", "").isdigit() and
            int(user_set_time[:2]) <= 23 and 
            int(user_set_time[-2:]) <= 59):

            # —Å–æ—Ö—Ä–∞–Ω–∏–º id –∏ –≤—Ä–µ–º—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                set_user_time(user_id = message.from_user.id, time = user_set_time)
            except Exception:
                await message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—Ä–µ–º–µ–Ω")

            await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç—á–µ—Ç –ø–æ –ø–æ–≥–æ–¥–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–∞–º –≤ *{user_set_time}* ‚õÖÔ∏è",
                                  parse_mode="Markdown")
        else:
            raise ValueError
        
        await state.clear()
    except Exception as e:
        print(e)
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00)", reply_markup = cansel_ikb)

#--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è ---#
@time_router.callback_query(F.data == "cansel_action")
async def cansel_action(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–£—Å–ø–µ—à–Ω–æ!")
    await state.clear()


#--- –ë–ª–æ–∫ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ ---#
@time_router.callback_query(F.data == "delete_time")
async def delete_time(callback: types.CallbackQuery, state = FSMContext):
    user_set_time = get_user_time(callback.from_user.id)
    countTimes = ", ".join(user_set_time)

    if(user_set_time == None):
        await callback.message.answer("‚ùóÔ∏è–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è‚ùóÔ∏è", reply_markup = no_time_ikb)
        await state.clear()
    else:    
        await callback.message.answer(f"–í–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {countTimes}", reply_markup = has_time_ikb)
        

# –û–±—Ä–∞–±—ã—Ç–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
@time_router.callback_query(F.data == "delete_set_time")
async def delete_set_time(callback: types.CallbackQuery):
    # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º—è
    delete_user_time(user_id = callback.from_user.id)

    # –æ—Ç–≤–µ—Ç–∏–º
    await callback.answer("–í–∞—à–µ –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
    